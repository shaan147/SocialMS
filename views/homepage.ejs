<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Social MS</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <!-- Link to external CSS file -->
  <link rel="stylesheet" href="/stylesheets/styles.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600&display=swap" rel="stylesheet">
</head>

<body>

  <h2 class="section-title">User Data</h2>
  <div class="cd">
    <% if (userData) { %>
    <div class="user-data">
      <img src="<%= userData.picture.data.url %>" alt="Profile Picture">
      <p class="user-data-field hover-effect-text">Name: <%= userData.name %></p>
      <p class="user-data-field hover-effect-text">Email: <%= userData.email %></p>
      <p class="user-data-field hover-effect-text">Birthday: <%= userData.birthday %></p>
      <p class="user-data-field hover-effect-text">Gender: <%= userData.gender %></p>
      <p class="user-data-field hover-effect-text">Languages: <%= userData.languages.map(function(language) { return language.name; }).join(', ') %></p>
      <% if (userData.hometown) { %>
      <p class="user-data-field hover-effect-text">Hometown: <%= userData.hometown.name %></p>
      <% } %>
      <p class="user-data-field hover-effect-text">
        Link:
        <a href="<%= userData.link %>" class="user-link" target="_blank" rel="noopener noreferrer">
          <%
          const linkText = userData.link.length > 30 ? userData.link.slice(0, 30) + "..." : userData.link;
          %>
          <span title="<%= userData.link %>"><%= linkText %></span>
        </a>
      </p>
      <% if (userData.age_range && userData.age_range.min) { %>
      <p class="user-data-field hover-effect-text">Age: <%= userData.age_range.min %>
      </p>
      <% } else { %>
      <p class="user-data-field hover-effect-text">Age: Not specified</p>
      <% } %>
      <p class="user-data-field hover-effect-text">Favorite Team:
        <% if (userData.favorite_teams && userData.favorite_teams.length > 0) { %>
        <%= userData.favorite_teams[0].name %>
        <% } else { %>
        Not specified
        <% } %>
      </p>
      <p class="user-data-field hover-effect-text">Favorite Athlete:
        <% if (userData.favorite_athletes && userData.favorite_athletes.length > 0) { %>
        <%= userData.favorite_athletes[0].name %>
        <% } else { %>
        Not specified
        <% } %>
      </p>
      <% if (albumsData.length > 0) { %>
      <div class="user-photos">
        <% albumsData.forEach((album) => { %>
        <% album.photos.data.forEach((photo) => { %>
        <a href="<%= photo.images[0].source %>" target="_blank">
          <img src="<%= photo.images[0].source %>" alt="User Photo" style="width: 50px; height: 50px;">
        </a>
        <% }); %>
        <% }); %>
      </div>
      <% } else { %>
      <p>No photos found.</p>
      <% } %>

    </div>
    <% } else { %>
    <p>Loading user data...</p>
    <% } %>
  </div>
  <h2 class="section-title">Area of Interest</h2>
  <% if (interest && interest.length > 0) { %>
  <ul>
    <li><%= interest %></li>
  </ul>
  <% } else { %>
  <p>No interests detected.</p>
  <% } %>
  <h2 class="section-title">Area of Interest from groups</h2>
  <% if (interestsFromGroups && interestsFromGroups.length > 0) { %>
  <ul>
    <li><%= interestsFromGroups %></li>
  </ul>
  <% } else { %>
  <p>No interests detected.</p>
  <% } %>
  <h2 style="display: flex; justify-content: center;">User's Words Analysis</h2>
  <canvas id="wordCountChart" style="display: flex; justify-content: center; width:100%; max-width:1200px; height:500px; font-size: 1.2rem;"></canvas>
  <br> <br>
  <h2 style="display: flex; justify-content: center;">User's Sentiment Analysis</h2>
  <div class="height: auto; width: auto;">
    <canvas id="sentimentChart" style="width: 260px; height: 260px;"></canvas>
  </div>
  <div>
    <h2 style="display: flex; justify-content: center;">Personality Scores</h2>
    <canvas id="personalityChart" style="display: flex; justify-content: center; width:100%; max-width:1200px; height:500px; font-size: 1.2rem;"></canvas>
  </div>
  <div>
    <p>Personality Description: <%= pD.content %></p>
  </div>
  <div>
    <p>User Description: <%= uD.content %></p>
  </div>
</body>
<script>
  // Shuffle function to randomize array elements
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

const mostCommonWordsData = <%- JSON.stringify(mostCommonWords) %>;

// Shuffle the mostCommonWordsData array randomly
shuffleArray(mostCommonWordsData);

// Generate a random RGB color with 50% opacity
const randomRGBAColor = () => {
  const random255 = () => Math.floor(Math.random() * 256);
  return `rgba(${random255()}, ${random255()}, ${random255()}, 0.5)`;
};

new Chart("wordCountChart", {
  type: "bar",
  data: {
    labels: mostCommonWordsData.map(item => item.word),
    datasets: [{
      label: 'Word Count',
      backgroundColor: mostCommonWordsData.map(() => randomRGBAColor()),
      borderColor: mostCommonWordsData.map(() => randomRGBAColor()), // Random border color
      borderWidth: 1, // Set border width to 1
      data: mostCommonWordsData.map(item => item.count)
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true,
          max: Math.max(...mostCommonWordsData.map(item => item.count)),
          fontSize: 17
        }
      }],
      xAxes: [{
        ticks: {
          fontSize: 17
        }
      }]
    },
    legend: {
      labels: {
        fontSize: 17
      }
    }
  }
});

  const sentiment = <%- JSON.stringify(sentiment) %>;
  const sentimentScore = sentiment.score;

  const sentimentChartData = {
    labels: ['Positive Sentiment', 'Negative Sentiment'],
    datasets: [{
      data: [sentimentScore, 100 - sentimentScore],
      backgroundColor: ['rgba(0, 255, 0, 1.0)', 'rgba(255, 0, 0, 1.0)']
    }]
  };

  const sentimentChartOptions = {
    responsive: true,
    maintainAspectRatio: false
  };

  new Chart("sentimentChart", {
    type: "pie",
    data: sentimentChartData,
    options: sentimentChartOptions
  });

  // Personality Scores Radar Chart Data
  const personalityScoresData = {
    extroversion: <%= personalityScores.extroversion %>,
    neuroticism: <%= personalityScores.neuroticism %>,
    agreeableness: <%= personalityScores.agreeableness %>,
    conscientiousness: <%= personalityScores.conscientiousness %>,
    openness: <%= personalityScores.openness %>,
  };

  const data = {
    labels: Object.keys(personalityScoresData),
    datasets: [{
      data: Object.values(personalityScoresData),
      backgroundColor: [
        'rgba(255, 0, 0, 0.5)', // Red for extroversion
        'rgba(255, 165, 0, 0.5)', // Orange for neuroticism
        'rgba(255, 255, 0, 0.5)', // Yellow for agreeableness
        'rgba(0, 128, 0, 0.5)', // Green for conscientiousness
        'rgba(0, 0, 255, 0.5)' // Blue for openness
      ],
    }]
  };

  const config = {
    type: 'polarArea',
    data: data,
    options: {
      responsive: true,
      plugins: {
        legend: false,
        tooltip: false,
      },
      elements: {
        arc: {
          backgroundColor: function(context) {

          },
        }
      }
    }
  };

  new Chart("personalityChart", config);
</script>

</html>
